% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_VCF_utilities.R
\name{intersect_Granges}
\alias{intersect_Granges}
\title{intersect and subtract Granges}
\usage{
intersect_Granges(Grange1, Grange2, invert = FALSE,
  merge_interval = TRUE)
}
\arguments{
\item{Grange1}{GRanges, vcfR or path to a BEDfile}

\item{Grange2}{GRanges, vcfR or path to a BEDfile}

\item{invert}{= FALSE If TRUE subtract Grange1 from Grange2}

\item{merge_interval}{= TRUE Should the interval be merged into larger, note that metadata are lost if TRUE}
}
\value{
intersected ranges
\item{ }{if Grange1 is vcfR returns a vcfR} \item{ }{if Grange1 is GRanges returns a GRanges}  \item{ }{if if Grange1 is character returns a GRanges}
}
\description{
This function is inspired from bedtools intersect and bedtools subtract and
try to provide a simple way to intersect ranges. vcfR object can be used as
either Granges1 or Granges2 but a vcfR object is only return when the vcf is
specified for Grange1. The metadata store in Granges1 will be lost if the
option merge_interval is TRUE as there is no rules to how to merge the
information.
}
\details{
This function is a simple implementation, for more complicated intersection 
and customization see the package HelloRanges.

NOTE!:The function ignore strand for the moment
}
\examples{

Grange1 <- GRanges(seqnames="chr1", ranges= c(1:10, 1:4, 2:5, 1:2, 100:1000, 120:140)) 
Grange2 <- GRanges(seqnames="chr1", ranges= c(1:10, 60:70, 100:110, 120:140)) 

intersect_Granges(Grange1, Grange2)
intersect_Granges(Grange1, Grange2, invert = TRUE)
intersect_Granges(Grange1, Grange2, merge_interval = FALSE)

}
\references{

}
\author{
~~Benjamin Laenen~~
}
\keyword{~utilities}
