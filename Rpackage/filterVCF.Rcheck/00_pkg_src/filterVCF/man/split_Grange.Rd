% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_VCF_utilities.R
\name{split_Grange}
\alias{split_Grange}
\title{Split a Genomic Ranges by another one}
\usage{
split_Grange(Grange1, Grange2)
}
\arguments{
\item{Grange1}{A GRanges object that will be binned according to Grange2}

\item{Grange2}{A GRanges object to intersect range in Grange1}
}
\value{
A list of GRanges with length equal to length(Grange2) and containing
intersected element of Grange1
}
\description{
This function takes a GRanges object and find the overlap for each range in
a second GRanges creating a list with length equal to the number of ranges
in the second arguments. For the moment the first GRanges must list all sites
as the function is intended to intersect sites in ranges. The function 
expand_all_pos_Granges can be used to produce a GRanges with all sites listed
as single and is call internally if the unique(width(Grange1)) is different from
1
}
\details{
For example, if the first GRanges are type of sites (e.g. synonymous,
stop-codons, ...) and the second GRanges has gene interval, the function will
bin the sites per genes and return a list with length equal to the number of
genes. If there is no overlap then an empty GRanges is return so to keep the
number of ranges in input and ouput equal. Note that there is no check for 
duplicates.
}
\examples{

# Define the sites to bin
Grange1 <- GRanges(seqnames="chr1", ranges= 1:100)
#Define the interval for binning
Grange2 <- GRanges(seqnames="chr1", ranges= c(1:10, 60:70, 100:110, 120:140)) 

splitted_Grange1 <- split_Grange(Grange1, Grange2)
length(Grange2) == length(splitted_Grange1)

}
\references{

}
\author{
~~Benjamin Laenen~~
 objects to See Also as \code{\link{help}},
}
\keyword{~utilities}
